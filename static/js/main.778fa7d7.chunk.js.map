{"version":3,"sources":["utils/console-message.js","styles/styles.js","context/reducer.js","context/DataProvider.jsx","utils/utils.js","components/ConfirmDelete.jsx","components/Card.jsx","components/TodoForm.jsx","components/PopoverHOC.jsx","components/CardContainer.jsx","App.js","index.js"],"names":["console","log","styles","todo","bgColor","doing","done","REMOVE_FROM_LIST","ADD_TO_LIST","SET_FROM","index","initialState","id","title","description","from","reducer","state","action","type","payload","list","elementId","filter","x","element","newList","push","removeFromList","addToList","DataContext","React","createContext","DataProvider","children","useReducer","dispatch","Provider","value","useData","useContext","getStateName","containerId","replace","ConfirmDelete","taskTitle","handleClose","isOpen","handleConfirm","cancelRef","useRef","leastDestructiveRef","onClose","fontSize","fontWeight","ref","onClick","colorScheme","ml","Card","droppableId","useDraggable","attributes","listeners","setNodeRef","transform","isDragging","useMediaQuery","hasMinWidth","style","y","undefined","useEffect","name","toast","useToast","useState","open","setOpen","status","isClosable","bg","borderRadius","borderWidth","boxShadow","height","mt","width","display","maxHeight","pt","textAlign","borderBottomColor","borderBottomRadius","borderBottomWidth","boxSize","cursor","icon","minHeight","minWidth","direction","spacing","as","isTruncated","m","mb","size","noOfLines","userSelect","Form","onCancel","listName","titleRef","descRef","invalid","setInvalid","isRequired","htmlFor","isInvalid","placeholder","onChange","e","target","color","d","justifyContent","variant","current","PopoverHOC","useDisclosure","onOpen","firstFieldRef","closeOnBlur","initialFocusRef","placement","p","TodoForm","CardContainer","head","data","useDroppable","isOver","styleDefault","shadow","textShadow","aria-label","data-list","map","item","i","App","onDragEnd","ev","overId","over","active","find","backgroundColor","minChildWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uIAEEA,QAAQC,IAAR,stBAQE,aACA,gB,6KCCWC,EAZA,CACbC,KAAM,CACJC,QAAS,aAEXC,MAAO,CACLD,QAAS,yBAEXE,KAAM,CACJF,QAAS,wB,0DCNPG,EAAmB,mBACnBC,EAAc,cACdC,EAAW,WAEbC,EAAQ,EAECC,EAAe,CAC1BR,KAAM,CACJ,CACES,GAAI,EAEJC,MAAO,gBACPC,YAAa,iCAGjBT,MAAO,GACPC,KAAM,GACNS,KAAM,MAGO,SAASC,EAAQC,EAAOC,GACrC,OAAQA,EAAOC,MACb,KAAKZ,EAAmB,IAAD,EACOW,EAAOE,QAA3BC,EADa,EACbA,KAAMC,EADO,EACPA,UAEd,OAAO,2BACFL,GADL,kBAEGI,EAAOJ,EAAMI,GAAME,QAAO,SAACC,GAAD,OAAOA,EAAEZ,KAAOU,OAI/C,KAAKd,EAAc,IAAD,EACUU,EAAOE,QAAzBC,EADQ,EACRA,KAAMI,EADE,EACFA,QAERC,EAAO,YAAOT,EAAMI,IAK1B,OAHAK,EAAQC,KAAR,2BAAkBF,GAAlB,IAA2Bb,GAAIF,KAC/BA,IAEO,2BACFO,GADL,kBAEGI,EAAOK,IAGZ,KAAKjB,EACH,OAAO,2BACFQ,GADL,IAEEF,KAAMG,EAAOE,UAGjB,QACE,OAAOH,GAIN,IAAMW,EAAiB,SAACP,EAAMC,GACnC,MAAO,CACLH,KAAMZ,EACNa,QAAS,CACPC,OACAC,eAKOO,EAAY,SAACR,EAAMI,GAC9B,MAAO,CACLN,KAAMX,EACNY,QAAS,CACPC,OACAI,a,OCpEOK,EAAcC,IAAMC,cAAc,MAYhCC,EAVM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACXH,IAAMI,WAAWnB,EAASL,GADf,mBAC9BM,EAD8B,KACvBmB,EADuB,KAGrC,OAAO,cAACN,EAAYO,SAAb,CAAsBC,MAAO,CAAErB,QAAOmB,YAAtC,SAAmDF,KAS/CK,EAAU,kBAAMR,IAAMS,WAAWV,IClBjCW,EAAe,SAACC,GAC3B,OAAOA,EAAYC,QAAQ,aAAc,K,yBC6C5BC,EAlCO,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,UAAWC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,cACjDC,EAAYlB,IAAMmB,SAExB,OACE,cAAC,IAAD,CAAaH,OAAQA,EAAQI,oBAAqBF,EAAWG,QAASN,EAAtE,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAmBO,SAAS,KAAKC,WAAW,OAA5C,0BAIA,eAAC,IAAD,sDAA0DT,KAE1D,eAAC,IAAD,WACE,cAAC,IAAD,CAAQU,IAAKN,EAAWO,QAASV,EAAjC,oBAGA,cAAC,IAAD,CAAQW,YAAY,MAAMC,GAAI,EAAGF,QAASR,EAA1C,+BC6EGW,EA1FF,SAAC,GAA6C,IAA3C9C,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,YAAaF,EAAsB,EAAtBA,GAAIgD,EAAkB,EAAlBA,YAAkB,EACaC,YAAa,CAChFjD,GAAIA,IADEkD,EADgD,EAChDA,WAAYC,EADoC,EACpCA,UAAWC,EADyB,EACzBA,WAAYC,EADa,EACbA,UAAWC,EADE,EACFA,WAG9C9B,EAAaG,IAAbH,SAJgD,EAKlC+B,YAAc,sBAA7BC,EALiD,oBAOlDC,EAAQJ,EACV,CAAEA,UAAU,eAAD,OAAiBA,EAAUzC,EAA3B,eAAmCyC,EAAUK,EAA7C,gBACXC,EAEJxC,IAAMyC,WAAU,WJkDK,IAACC,EIjDhBP,GACF9B,GJgDkBqC,EIhDDhC,EAAamB,GJiD3B,CACLzC,KAAMV,EACNW,QAASqD,OIjDR,CAACP,EAAY9B,EAAUwB,EAAahD,IAEvC,IAAM8D,EAAQC,cAjB0C,EAkBhC5C,IAAM6C,UAAS,GAlBiB,mBAkBjDC,EAlBiD,KAkB3CC,EAlB2C,KAgCxD,OACE,qCACGD,GACC,cAAC,EAAD,CACE/B,YAjBY,kBAAMgC,GAAQ,IAkB1B9B,cAfc,WACpBZ,EAASR,EAAea,EAAamB,GAAchD,IACnDkE,GAAQ,GACRJ,EAAM,CACJ7D,MAAO,eACPkE,OAAQ,UACRC,YAAY,KAURjC,OAAQ8B,EACRhC,UAAWhC,IAGf,eAAC,IAAD,CACE0C,IAAKS,EACLiB,GAAG,QACHC,aAAa,KACbC,YAAY,MACZC,UAAU,KACVC,OAAO,OACPC,GAAG,IACHjB,MAAOA,EACPkB,MAAM,OATR,UAWE,cAAC,IAAD,CAAOC,QAAQ,QAAQC,UAAW,EAAGC,GAAG,IAAIC,UAAU,SAAtD,SACE,cAAC,IAAD,uCACM5B,GACAD,GAFN,IAGE8B,kBAAkB,YAClBC,mBAAmB,OACnBC,kBAAkB,MAClBC,QAAQ,IACRC,OAAO,OACPC,KAAM,cAAC,IAAD,CAAcV,MAAO,MAC3BW,UAAW,EACXC,SAAS,OACTb,GAAG,KACHK,UAAU,cAGd,eAAC,IAAD,CAAOS,UAAU,MAAMC,QAAQ,OAA/B,UACE,cAAC,IAAD,CAASC,GAAG,KAAKC,aAAcnC,EAAaoC,EAAE,IAAIC,GAAG,IAAIC,KAAK,KAA9D,SACG7F,IAEH,cAAC,IAAD,CAAa6F,KAAK,KAAKlD,QArDZ,kBAAMsB,GAAQ,SAuD3B,cAAC,IAAD,CAAM0B,EAAE,IAAIlB,GAAG,IAAIqB,UAAW,EAAGC,WAAW,OAA5C,SACG9F,W,oDCJI+F,EAvEF,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAChB3E,EAAaG,IAAbH,SACF4E,EAAWjF,IAAMmB,SACjB+D,EAAUlF,IAAMmB,SAChBwB,EAAQC,cAJyB,EAKT5C,IAAM6C,UAAS,GALN,mBAKhCsC,EALgC,KAKvBC,EALuB,KAkCvC,OACE,eAAC,IAAD,CAAOd,QAAS,EAAhB,UACE,eAAC,IAAD,CAAae,YAAU,EAAvB,UACE,cAAC,IAAD,CAAWC,QAAQ,QAAnB,mBACA,cAAC,IAAD,CACE9D,IAAKyD,EACLpG,GAAG,QACH0G,UAAWJ,EACXK,YAAY,OACZC,SAfY,SAACC,GAAO,IAAD,EACD,MAApB,UAAAA,EAAEC,cAAF,eAAUpF,QACZ6E,GAAW,MAeRD,GACC,cAAC,IAAD,CAAMZ,GAAG,OAAOqB,MAAM,MAAMtE,SAAU,GAAIsC,UAAU,OAApD,0CAKJ,cAAC,IAAD,CAAayB,YAAU,EAAvB,SACE,cAAC,IAAD,CAAU7D,IAAK0D,EAASM,YAAY,2BAA2Bb,KAAK,SAEtE,eAAC,IAAD,CAAakB,EAAE,OAAOC,eAAe,WAArC,UACE,cAAC,IAAD,CAAQC,QAAQ,UAAUtE,QAASsD,EAAnC,oBAGA,cAAC,IAAD,CAAQrD,YAAY,OAAOD,QAnDZ,WACnB,GAAIwD,EAASe,SAAWd,EAAQc,QAAS,CACvC,IAAIlH,EAAQmG,EAASe,QAAQzF,MACzBxB,EAAcmG,EAAQc,QAAQzF,MAElC,GAAc,KAAVzB,EAGF,YAFAsG,GAAW,GAKb/E,EAASP,EAAUkF,EAAU,CAAEnG,GAAI,EAAGC,QAAOC,iBAC7C4D,EAAM,CACJ7D,MAAO,gBACPkE,OAAQ,UACRC,YAAY,IAGhB8B,KAiCI,yBC/BOkB,EAhCI,SAAC,GAA4B,IAA1B9F,EAAyB,EAAzBA,SAAU6E,EAAe,EAAfA,SAAe,EACTkB,cAA5BC,EADqC,EACrCA,OAAQ9E,EAD6B,EAC7BA,QAASL,EADoB,EACpBA,OACnBoF,EAAgBpG,IAAMmB,OAAO,MAEnC,OACE,mCACE,eAAC,IAAD,CACEkF,aAAa,EACbC,gBAAiBF,EACjBpF,OAAQA,EACRuF,UAAU,OACVlF,QAASA,EACT8E,OAAQA,EANV,UAQGnF,GACC,eAAC,IAAD,CAAgBwF,EAAG,EAAnB,UACE,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAACC,EAAD,CAAUL,cAAeA,EAAepB,SAAUA,EAAUD,SAAU1D,OAGzElB,QCmCMuG,EAvDO,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,KAAM/E,EAAkB,EAAlBA,YAAkB,EACtBgF,YAAa,CAC1ChI,GAAIgD,IADEI,EAD6C,EAC7CA,WAAY6E,EADiC,EACjCA,OAIZzI,EAAY0I,EAAalF,GAAzBxD,QAER,OACE,cAAC,EAAD,CAAY2G,SAAUnD,EAAtB,SACE,eAAC,IAAD,CACEL,IAAKS,EACLiB,GAAI4D,EAASzI,EAAU,QACvB8E,aAAa,KACbC,YAAY,MACZE,OAAO,eACPkD,EAAE,IACFQ,OAAO,KAPT,UASE,eAAC,IAAD,CAAO3C,UAAU,MAAMC,QAAQ,OAA/B,UACE,cAAC,IAAD,CACEE,aAAW,EACXD,GAAG,KACHqB,MAAOkB,EAAS,QAAUzI,EAC1BkD,WAAW,OACXkD,EAAE,IACFb,UAAU,SACVqD,WAAW,QAPb,SASGN,IAEH,cAAC,IAAD,UACE,cAAC,IAAD,CACEO,aAAW,aACXhE,GAAG,QACHG,UAAU,KACV8D,YAAWtF,EACXqC,KAAM,cAAC,IAAD,IACNV,MAAM,aAIXoD,EAAKQ,KAAI,SAACC,EAAMC,GAAP,OACR,cAAC,EAAD,aAAczF,YAAaA,GAAiBwF,GAAjCC,YCZNC,MAjCf,WAAgB,IAAD,EACe/G,IAApBtB,EADK,EACLA,MAAOmB,EADF,EACEA,SACPjC,EAA4Bc,EAA5Bd,KAAME,EAAsBY,EAAtBZ,MAAOC,EAAeW,EAAfX,KAAMS,EAASE,EAATF,KAc3B,OACE,cAAC,IAAD,CAAYwI,UAbQ,SAACC,GAAQ,IAEfC,EAEVD,EAFFE,KAAQ9I,GACMU,EACZkI,EADFG,OAAU/I,GAGNa,EAAUR,EAAMF,GAAM6I,MAAK,SAACpI,GAAD,OAAOA,EAAEZ,KAAOU,KAEjDc,EAASR,EAAeb,EAAMO,IAC9Bc,EAASP,EAAUY,EAAagH,GAAShI,KAIzC,SACE,eAAC,IAAD,CAAYoI,gBAAgB,WAAWxE,OAAO,OAAOyE,cAAc,QAAQzD,QAAQ,OAAnF,UACE,cAAC,IAAD,CAAKhB,OAAO,YAAYkD,EAAE,IAA1B,SACE,cAAC,EAAD,CAAeI,KAAMxI,EAAMyD,YAAY,OAAO8E,KAAK,YAErD,cAAC,IAAD,CAAKrD,OAAO,YAAYkD,EAAE,IAA1B,SACE,cAAC,EAAD,CAAeI,KAAMtI,EAAOuD,YAAY,QAAQ8E,KAAK,YAEvD,cAAC,IAAD,CAAKrD,OAAO,YAAYkD,EAAE,IAA1B,SACE,cAAC,EAAD,CAAeI,KAAMrI,EAAMsD,YAAY,OAAO8E,KAAK,iB,OC3B7DqB,IAASC,OACP,cAAC,EAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UAINC,SAASC,eAAe,W","file":"static/js/main.778fa7d7.chunk.js","sourcesContent":["/* eslint-disable no-console */\r\n(function () {\r\n  console.log(\r\n    `%c\r\n  ╔═╗┌┐┌┌┬┐┌─┐┌┐┌┬ ┬  ╔═╗┌─┐┌─┐┬ ┬┌┐┌┌┬┐┌─┐┌─┐\r\n  ╠═╣│││ │ │ ││││└┬┘  ╠╣ ├─┤│ ┬│ ││││ ││├┤ ┌─┘\r\n  ╩ ╩┘└┘ ┴ └─┘┘└┘ ┴   ╚  ┴ ┴└─┘└─┘┘└┘─┴┘└─┘└─┘\r\n\r\n%c  React/NetCore Developer\r\n    `,\r\n    \"color: red\",\r\n    \"color: blue\"\r\n  );\r\n})();\r\n","const styles = {\r\n  todo: {\r\n    bgColor: \"lightgray\",\r\n  },\r\n  doing: {\r\n    bgColor: \"rgba(247, 202, 24, 1)\",\r\n  },\r\n  done: {\r\n    bgColor: \"rgba(0, 230, 64, 1)\",\r\n  },\r\n};\r\n\r\nexport default styles;\r\n","//Me base en el orden de ducks\r\n//(Un archivo con las constantes, el reducer y los creadores de acción)\r\nconst REMOVE_FROM_LIST = \"REMOVE_FROM_LIST\";\r\nconst ADD_TO_LIST = \"ADD_TO_LIST\";\r\nconst SET_FROM = \"SET_FROM\";\r\n\r\nlet index = 2;\r\n\r\nexport const initialState = {\r\n  todo: [\r\n    {\r\n      id: 1, //debo inicializarlo en cero, la API al parecer no funciona bien con un ID en cero,\r\n      //podría deberse a alguna validación interna\r\n      title: \"Tarea Ejemplo\",\r\n      description: \"Esto es una tarea de ejemplo\",\r\n    },\r\n  ],\r\n  doing: [],\r\n  done: [],\r\n  from: null,\r\n};\r\n\r\nexport default function reducer(state, action) {\r\n  switch (action.type) {\r\n    case REMOVE_FROM_LIST: {\r\n      const { list, elementId } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        [list]: state[list].filter((x) => x.id !== elementId),\r\n      };\r\n    }\r\n\r\n    case ADD_TO_LIST: {\r\n      const { list, element } = action.payload;\r\n\r\n      const newList = [...state[list]];\r\n\r\n      newList.push({ ...element, id: index });\r\n      index++; //index 'autoincremental'\r\n\r\n      return {\r\n        ...state,\r\n        [list]: newList,\r\n      };\r\n    }\r\n    case SET_FROM: {\r\n      return {\r\n        ...state,\r\n        from: action.payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const removeFromList = (list, elementId) => {\r\n  return {\r\n    type: REMOVE_FROM_LIST,\r\n    payload: {\r\n      list,\r\n      elementId,\r\n    },\r\n  };\r\n};\r\n\r\nexport const addToList = (list, element) => {\r\n  return {\r\n    type: ADD_TO_LIST,\r\n    payload: {\r\n      list,\r\n      element,\r\n    },\r\n  };\r\n};\r\n\r\nexport const setFrom = (name) => {\r\n  return {\r\n    type: SET_FROM,\r\n    payload: name,\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport reducer, { initialState } from \"./reducer\";\r\nexport const DataContext = React.createContext(null);\r\n\r\nconst DataProvider = ({ children }) => {\r\n  const [state, dispatch] = React.useReducer(reducer, initialState);\r\n\r\n  return <DataContext.Provider value={{ state, dispatch }}>{children}</DataContext.Provider>;\r\n};\r\n\r\nDataProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default DataProvider;\r\n\r\nexport const useData = () => React.useContext(DataContext);\r\n","export const getStateName = (containerId) => {\r\n  return containerId.replace(\"-container\", \"\");\r\n};\r\n","import {\r\n  Button,\r\n  AlertDialog,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ConfirmDelete = ({ taskTitle, handleClose, isOpen, handleConfirm }) => {\r\n  const cancelRef = React.useRef();\r\n\r\n  return (\r\n    <AlertDialog isOpen={isOpen} leastDestructiveRef={cancelRef} onClose={handleClose}>\r\n      <AlertDialogOverlay>\r\n        <AlertDialogContent>\r\n          <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n            Delete Task.\r\n          </AlertDialogHeader>\r\n\r\n          <AlertDialogBody>Are you sure? You will delete the Task: {taskTitle}</AlertDialogBody>\r\n\r\n          <AlertDialogFooter>\r\n            <Button ref={cancelRef} onClick={handleClose}>\r\n              Cancel\r\n            </Button>\r\n            <Button colorScheme=\"red\" ml={3} onClick={handleConfirm}>\r\n              Delete\r\n            </Button>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialogOverlay>\r\n    </AlertDialog>\r\n  );\r\n};\r\n\r\nConfirmDelete.propTypes = {\r\n  taskTitle: PropTypes.string.isRequired,\r\n  handleClose: PropTypes.func.isRequired,\r\n  isOpen: PropTypes.bool.isRequired,\r\n  handleConfirm: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ConfirmDelete;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Box, Stack, Heading, Text } from \"@chakra-ui/layout\";\r\nimport { CloseButton } from \"@chakra-ui/close-button\";\r\nimport { IconButton } from \"@chakra-ui/button\";\r\nimport { MdDragHandle } from \"react-icons/md\";\r\nimport { useDraggable } from \"@dnd-kit/core\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport { useMediaQuery } from \"@chakra-ui/media-query\";\r\n\r\nimport { useData } from \"../context/DataProvider\";\r\nimport { removeFromList, setFrom } from \"../context/reducer\";\r\nimport { getStateName } from \"../utils/utils\";\r\n\r\nimport ConfirmDelete from \"./ConfirmDelete\";\r\n\r\nconst Card = ({ title, description, id, droppableId }) => {\r\n  const { attributes, listeners, setNodeRef, transform, isDragging } = useDraggable({\r\n    id: id,\r\n  });\r\n  const { dispatch } = useData();\r\n  const [hasMinWidth] = useMediaQuery(\"(min-width: 510px)\");\r\n\r\n  const style = transform\r\n    ? { transform: `translate3d(${transform.x}px, ${transform.y}px, 0)` }\r\n    : undefined;\r\n\r\n  React.useEffect(() => {\r\n    if (isDragging) {\r\n      dispatch(setFrom(getStateName(droppableId)));\r\n    }\r\n  }, [isDragging, dispatch, droppableId, id]);\r\n\r\n  const toast = useToast();\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClose = () => setOpen(false);\r\n  const handleOpen = () => setOpen(true);\r\n\r\n  const handleConfirm = () => {\r\n    dispatch(removeFromList(getStateName(droppableId), id));\r\n    setOpen(false);\r\n    toast({\r\n      title: \"Task Deleted\",\r\n      status: \"warning\",\r\n      isClosable: true,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {open && (\r\n        <ConfirmDelete\r\n          handleClose={handleClose}\r\n          handleConfirm={handleConfirm}\r\n          isOpen={open}\r\n          taskTitle={title}\r\n        />\r\n      )}\r\n      <Box\r\n        ref={setNodeRef}\r\n        bg=\"white\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"2px\"\r\n        boxShadow=\"md\"\r\n        height=\"auto\"\r\n        mt=\"2\"\r\n        style={style}\r\n        width=\"full\"\r\n      >\r\n        <Stack display=\"block\" maxHeight={6} pt=\"0\" textAlign=\"center\">\r\n          <IconButton\r\n            {...listeners}\r\n            {...attributes}\r\n            borderBottomColor=\"lightgray\"\r\n            borderBottomRadius=\"none\"\r\n            borderBottomWidth=\"1px\"\r\n            boxSize=\"5\"\r\n            cursor=\"move\"\r\n            icon={<MdDragHandle width={100} />}\r\n            minHeight={6}\r\n            minWidth=\"full\"\r\n            mt=\"-1\"\r\n            textAlign=\"center\"\r\n          />\r\n        </Stack>\r\n        <Stack direction=\"row\" spacing=\"auto\">\r\n          <Heading as=\"h5\" isTruncated={!hasMinWidth} m=\"2\" mb=\"0\" size=\"md\">\r\n            {title}\r\n          </Heading>\r\n          <CloseButton size=\"sm\" onClick={handleOpen} />\r\n        </Stack>\r\n        <Text m=\"5\" mt=\"3\" noOfLines={3} userSelect=\"none\">\r\n          {description}\r\n        </Text>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nCard.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n  id: PropTypes.number.isRequired,\r\n  droppableId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport {\r\n  Stack,\r\n  ButtonGroup,\r\n  Button,\r\n  Textarea,\r\n  useToast,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useData } from \"../context/DataProvider\";\r\nimport { addToList } from \"../context/reducer\";\r\n\r\nconst Form = ({ onCancel, listName }) => {\r\n  const { dispatch } = useData();\r\n  const titleRef = React.useRef();\r\n  const descRef = React.useRef();\r\n  const toast = useToast();\r\n  const [invalid, setInvalid] = React.useState(false);\r\n  //Refs para no renderizar en cada cambio el form\r\n  const handleSubmit = () => {\r\n    if (titleRef.current && descRef.current) {\r\n      let title = titleRef.current.value;\r\n      let description = descRef.current.value;\r\n\r\n      if (title === \"\") {\r\n        setInvalid(true);\r\n\r\n        return;\r\n      }\r\n\r\n      dispatch(addToList(listName, { id: 0, title, description }));\r\n      toast({\r\n        title: \"Task Created!\",\r\n        status: \"success\",\r\n        isClosable: true,\r\n      });\r\n    }\r\n    onCancel();\r\n  };\r\n\r\n  const handleValid = (e) => {\r\n    if (e.target?.value !== \"\") {\r\n      setInvalid(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Stack spacing={4}>\r\n      <FormControl isRequired>\r\n        <FormLabel htmlFor=\"title\">Title</FormLabel>\r\n        <Input\r\n          ref={titleRef}\r\n          id=\"title\"\r\n          isInvalid={invalid}\r\n          placeholder=\"Task\"\r\n          onChange={handleValid}\r\n        />\r\n        {invalid && (\r\n          <Text as=\"span\" color=\"red\" fontSize={15} textAlign=\"left\">\r\n            The title cannot be empty\r\n          </Text>\r\n        )}\r\n      </FormControl>\r\n      <FormControl isRequired>\r\n        <Textarea ref={descRef} placeholder=\"Write here a description\" size=\"sm\" />\r\n      </FormControl>\r\n      <ButtonGroup d=\"flex\" justifyContent=\"flex-end\">\r\n        <Button variant=\"outline\" onClick={onCancel}>\r\n          Cancel\r\n        </Button>\r\n        <Button colorScheme=\"teal\" onClick={handleSubmit}>\r\n          Save\r\n        </Button>\r\n      </ButtonGroup>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  onCancel: PropTypes.func.isRequired,\r\n  listName: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport {\r\n  PopoverContent,\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverCloseButton,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport TodoForm from \"./TodoForm\";\r\n\r\nconst PopoverHOC = ({ children, listName }) => {\r\n  const { onOpen, onClose, isOpen } = useDisclosure();\r\n  const firstFieldRef = React.useRef(null);\r\n\r\n  return (\r\n    <>\r\n      <Popover\r\n        closeOnBlur={false}\r\n        initialFocusRef={firstFieldRef}\r\n        isOpen={isOpen}\r\n        placement=\"auto\"\r\n        onClose={onClose}\r\n        onOpen={onOpen}\r\n      >\r\n        {isOpen && (\r\n          <PopoverContent p={5}>\r\n            <PopoverArrow />\r\n            <PopoverCloseButton />\r\n            <TodoForm firstFieldRef={firstFieldRef} listName={listName} onCancel={onClose} />\r\n          </PopoverContent>\r\n        )}\r\n        {children}\r\n      </Popover>\r\n    </>\r\n  );\r\n};\r\n\r\nPopoverHOC.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  listName: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default PopoverHOC;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Box, Heading, Stack } from \"@chakra-ui/layout\";\r\nimport { IconButton } from \"@chakra-ui/button\";\r\nimport { MdAdd } from \"react-icons/md\";\r\nimport { useDroppable } from \"@dnd-kit/core\";\r\nimport { PopoverTrigger } from \"@chakra-ui/popover\";\r\n\r\nimport styleDefault from \"../styles/styles\";\r\n\r\nimport Card from \"./Card\";\r\nimport PopoverHOC from \"./PopoverHOC\";\r\n\r\nconst CardContainer = ({ head, data, droppableId }) => {\r\n  const { setNodeRef, isOver } = useDroppable({\r\n    id: droppableId,\r\n  });\r\n\r\n  const { bgColor } = styleDefault[droppableId];\r\n\r\n  return (\r\n    <PopoverHOC listName={droppableId}>\r\n      <Box\r\n        ref={setNodeRef}\r\n        bg={isOver ? bgColor : \"white\"}\r\n        borderRadius=\"xl\"\r\n        borderWidth=\"2px\"\r\n        height=\"container.sm\"\r\n        p=\"2\"\r\n        shadow=\"md\"\r\n      >\r\n        <Stack direction=\"row\" spacing=\"auto\">\r\n          <Heading\r\n            isTruncated\r\n            as=\"h2\"\r\n            color={isOver ? \"white\" : bgColor}\r\n            fontWeight=\"bold\"\r\n            m=\"2\"\r\n            textAlign=\"center\"\r\n            textShadow=\"inner\"\r\n          >\r\n            {head}\r\n          </Heading>\r\n          <PopoverTrigger>\r\n            <IconButton\r\n              aria-label=\"add-button\"\r\n              bg=\"white\"\r\n              boxShadow=\"md\"\r\n              data-list={droppableId}\r\n              icon={<MdAdd />}\r\n              width=\"0.5\"\r\n            />\r\n          </PopoverTrigger>\r\n        </Stack>\r\n        {data.map((item, i) => (\r\n          <Card key={i} droppableId={droppableId} {...item} />\r\n        ))}\r\n      </Box>\r\n    </PopoverHOC>\r\n  );\r\n};\r\n\r\nCardContainer.propTypes = {\r\n  head: PropTypes.string.isRequired,\r\n  data: PropTypes.array.isRequired,\r\n  droppableId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default CardContainer;\r\n","import { Box } from \"@chakra-ui/layout\";\nimport { SimpleGrid } from \"@chakra-ui/layout\";\nimport { DndContext } from \"@dnd-kit/core\";\nimport React from \"react\";\n\nimport CardContainer from \"./components/CardContainer\";\nimport { useData } from \"./context/DataProvider\";\nimport { addToList, removeFromList } from \"./context/reducer\";\nimport { getStateName } from \"./utils/utils\";\n\nfunction App() {\n  const { state, dispatch } = useData();\n  const { todo, doing, done, from } = state;\n\n  const handleDragEnd = (ev) => {\n    const {\n      over: { id: overId },\n      active: { id: elementId },\n    } = ev;\n\n    const element = state[from].find((x) => x.id === elementId);\n\n    dispatch(removeFromList(from, elementId));\n    dispatch(addToList(getStateName(overId), element));\n  };\n\n  return (\n    <DndContext onDragEnd={handleDragEnd}>\n      <SimpleGrid backgroundColor=\"gray.200\" height=\"full\" minChildWidth=\"120px\" spacing=\"30px\">\n        <Box height=\"container\" p=\"2\">\n          <CardContainer data={todo} droppableId=\"todo\" head=\"TO DO\" />\n        </Box>\n        <Box height=\"container\" p=\"2\">\n          <CardContainer data={doing} droppableId=\"doing\" head=\"DOING\" />\n        </Box>\n        <Box height=\"container\" p=\"2\">\n          <CardContainer data={done} droppableId=\"done\" head=\"DONE\" />\n        </Box>\n      </SimpleGrid>\n    </DndContext>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport DataProvider from \"./context/DataProvider\";\nimport \"./utils/console-message\"; //IFFE\n\nReactDOM.render(\n  <DataProvider>\n    <ChakraProvider>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </ChakraProvider>\n  </DataProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}