{"version":3,"sources":["utils/console-message.js","styles/styles.js","context/reducer.js","context/DataProvider.jsx","components/ConfirmDelete.jsx","components/Card.jsx","components/CardContainer.jsx","components/TodoForm.jsx","App.js","index.js"],"names":["console","log","styles","todo","bgColor","doing","done","REMOVE_TASK","ADD_TASK","EDIT_TASK","SET_SELECTED_ID","initialState","JSON","parse","localStorage","getItem","data","id","uuidV1","title","description","status","selectedId","initialTask","reducer","state","action","type","filter","x","payload","element","map","task","newTask","editTask","setSelectedTask","DataContext","React","createContext","DataProvider","children","useReducer","dispatch","disclosure","useDisclosure","useEffect","setItem","stringify","Provider","value","useData","useContext","ConfirmDelete","taskTitle","handleClose","isOpen","handleConfirm","cancelRef","useRef","leastDestructiveRef","onClose","fontSize","fontWeight","ref","onClick","colorScheme","ml","Card","useDraggable","attributes","listeners","setNodeRef","transform","onOpen","useMediaQuery","hasMinWidth","style","y","undefined","toast","useToast","useState","open","setOpen","isClosable","bg","borderRadius","borderWidth","boxShadow","height","minHeight","mt","width","direction","pr","spacing","overflowY","as","isTruncated","m","mb","size","noOfLines","pl","userSelect","align","pb","_active","backgroundColor","_focus","_hover","_selected","color","cursor","icon","maxWidth","minWidth","role","touchAction","textAlign","touch-action","aria-label","IconButton","maxHeight","variant","CardContainer","head","droppableId","useDroppable","isOver","styleDefault","toLowerCase","p","length","shadow","textShadow","item","i","Form","values","setValues","titleRef","descRef","statusRef","invalid","setInvalid","find","isRequired","htmlFor","defaultValue","isInvalid","placeholder","onChange","e","target","d","justifyContent","current","App","TodoForm","onDragEnd","ev","newStatus","over","elementId","active","minChildWidth","pointerEvents","position","_focusWithin","aria-details","borderColor","marginBottom","marginLeft","marginRight","marginTop","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23c15b6d.chunk.js","sourcesContent":["/* eslint-disable no-console */\r\n(function () {\r\n  console.log(\r\n    `%c\r\n  ╔═╗┌┐┌┌┬┐┌─┐┌┐┌┬ ┬  ╔═╗┌─┐┌─┐┬ ┬┌┐┌┌┬┐┌─┐┌─┐\r\n  ╠═╣│││ │ │ ││││└┬┘  ╠╣ ├─┤│ ┬│ ││││ ││├┤ ┌─┘\r\n  ╩ ╩┘└┘ ┴ └─┘┘└┘ ┴   ╚  ┴ ┴└─┘└─┘┘└┘─┴┘└─┘└─┘\r\n\r\n%c  React/NetCore Developer\r\n    `,\r\n    \"color: red\",\r\n    \"color: blue\"\r\n  );\r\n})();\r\n","const styles = {\r\n  todo: {\r\n    bgColor: \"lightgray\",\r\n  },\r\n  doing: {\r\n    bgColor: \"rgba(247, 202, 24, 1)\",\r\n  },\r\n  done: {\r\n    bgColor: \"rgba(0, 230, 64, 1)\",\r\n  },\r\n};\r\n\r\nexport default styles;\r\n","import { v1 as uuidV1 } from \"uuid\";\r\n//Me base en el orden de ducks\r\n//(Un archivo con las constantes, el reducer y los creadores de acción)\r\nconst REMOVE_TASK = \"REMOVE_TASK\";\r\nconst ADD_TASK = \"ADD_TASK\";\r\nconst EDIT_TASK = \"EDIT_TASK\";\r\nconst SET_SELECTED_ID = \"SET_SELECTED_ID\";\r\n\r\n/**\r\n * @typedef Task\r\n * @type {object}\r\n * @property {string} id - Unique id,\r\n * @property {string} title - Title of task\r\n * @property {string} description - Description\r\n * @property {\"TODO\"|\"DOING\"|\"DONE\"} status - status\r\n *\r\n */\r\n\r\n/**\r\n * @typedef State\r\n * @property {Array<Task>} data - List of tasks\r\n * @property {?string} selectedId - List of tasks\r\n */\r\nexport const initialState = JSON.parse(localStorage.getItem(\"state\")) || {\r\n  data: [\r\n    {\r\n      id: uuidV1(),\r\n      title: \"Tarea Ejemplo\",\r\n      description: \"Esto es una tarea de ejemplo\",\r\n      status: \"TODO\",\r\n    },\r\n  ],\r\n  selectedId: null,\r\n};\r\n\r\n/**\r\n * @type {Task}\r\n */\r\nexport const initialTask = {\r\n  id: \"\",\r\n  title: \"\",\r\n  description: \"\",\r\n  status: \"TODO\",\r\n};\r\n\r\n/**\r\n * @typedef Action\r\n * @property {string} type\r\n * @property {string|Task} payload\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @param {Action} action\r\n */\r\nexport default function reducer(state, action) {\r\n  switch (action.type) {\r\n    case REMOVE_TASK: {\r\n      return {\r\n        ...state,\r\n        data: state.data.filter((x) => x.id !== action.payload),\r\n      };\r\n    }\r\n\r\n    case ADD_TASK: {\r\n      let element = { ...action.payload, id: uuidV1() };\r\n\r\n      return {\r\n        ...state,\r\n        data: [...state.data, element],\r\n      };\r\n    }\r\n    case EDIT_TASK: {\r\n      return {\r\n        ...state,\r\n        data: state.data.map((task) => {\r\n          let newTask = task;\r\n\r\n          if (task.id === action.payload.id) {\r\n            newTask = action.payload;\r\n          }\r\n\r\n          return newTask;\r\n        }),\r\n      };\r\n    }\r\n\r\n    case SET_SELECTED_ID: {\r\n      return {\r\n        ...state,\r\n        selectedId: action.payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} elementId\r\n *\r\n * @returns {Action}\r\n */\r\nexport const removeTask = (elementId) => {\r\n  return {\r\n    type: REMOVE_TASK,\r\n    payload: elementId,\r\n  };\r\n};\r\n\r\n/**\r\n * @param {Task} task\r\n *\r\n * @returns {Action}\r\n */\r\nexport const addTask = (task) => {\r\n  return {\r\n    type: ADD_TASK,\r\n    payload: task,\r\n  };\r\n};\r\n\r\n/**\r\n * @param {Task} task\r\n *\r\n * @returns {Action}\r\n */\r\nexport const editTask = (task) => {\r\n  return {\r\n    type: EDIT_TASK,\r\n    payload: task,\r\n  };\r\n};\r\n\r\n/**\r\n * @param {?string} id\r\n *\r\n * @returns {Action}\r\n */\r\nexport const setSelectedTask = (id) => {\r\n  return {\r\n    type: SET_SELECTED_ID,\r\n    payload: id,\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\n\r\nimport reducer, { initialState } from \"./reducer\";\r\nexport const DataContext = React.createContext(null);\r\n\r\nconst DataProvider = ({ children }) => {\r\n  const [state, dispatch] = React.useReducer(reducer, initialState);\r\n  const disclosure = useDisclosure();\r\n\r\n  React.useEffect(() => {\r\n    localStorage.setItem(\"state\", JSON.stringify(state));\r\n  }, [state]);\r\n\r\n  return (\r\n    <DataContext.Provider value={{ state, dispatch, ...disclosure }}>\r\n      {children}\r\n    </DataContext.Provider>\r\n  );\r\n};\r\n\r\nDataProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default DataProvider;\r\n\r\nexport const useData = () => React.useContext(DataContext);\r\n","import {\r\n  Button,\r\n  AlertDialog,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ConfirmDelete = ({ taskTitle, handleClose, isOpen, handleConfirm }) => {\r\n  const cancelRef = React.useRef();\r\n\r\n  return (\r\n    <AlertDialog isOpen={isOpen} leastDestructiveRef={cancelRef} onClose={handleClose}>\r\n      <AlertDialogOverlay>\r\n        <AlertDialogContent>\r\n          <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n            Delete Task.\r\n          </AlertDialogHeader>\r\n\r\n          <AlertDialogBody>Are you sure? You will delete the Task: {taskTitle}</AlertDialogBody>\r\n\r\n          <AlertDialogFooter>\r\n            <Button ref={cancelRef} onClick={handleClose}>\r\n              Cancel\r\n            </Button>\r\n            <Button colorScheme=\"red\" ml={3} onClick={handleConfirm}>\r\n              Delete\r\n            </Button>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialogOverlay>\r\n    </AlertDialog>\r\n  );\r\n};\r\n\r\nConfirmDelete.propTypes = {\r\n  taskTitle: PropTypes.string.isRequired,\r\n  handleClose: PropTypes.func.isRequired,\r\n  isOpen: PropTypes.bool.isRequired,\r\n  handleConfirm: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ConfirmDelete;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Box, Stack, Heading, Text } from \"@chakra-ui/layout\";\r\nimport { IconButton } from \"@chakra-ui/button\";\r\nimport { MdDelete, MdEdit, MdSettings } from \"react-icons/md\";\r\nimport { FaGripVertical } from \"react-icons/fa\";\r\nimport { useDraggable } from \"@dnd-kit/core\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport { useMediaQuery } from \"@chakra-ui/media-query\";\r\nimport { Menu, MenuButton, MenuItem, MenuList } from \"@chakra-ui/menu\";\r\n\r\nimport { useData } from \"../context/DataProvider\";\r\nimport { removeTask, setSelectedTask } from \"../context/reducer\";\r\n\r\nimport ConfirmDelete from \"./ConfirmDelete\";\r\n\r\nconst Card = ({ title, description, id }) => {\r\n  const { attributes, listeners, setNodeRef, transform } = useDraggable({\r\n    id: id,\r\n  });\r\n  const { dispatch, onOpen } = useData();\r\n  const [hasMinWidth] = useMediaQuery(\"(min-width: 510px)\");\r\n\r\n  const style = transform\r\n    ? { transform: `translate3d(${transform.x}px, ${transform.y}px, 0)` }\r\n    : undefined;\r\n\r\n  const toast = useToast();\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClose = () => setOpen(false);\r\n  const handleOpen = () => setOpen(true);\r\n\r\n  const handleConfirm = () => {\r\n    dispatch(removeTask(id));\r\n    setOpen(false);\r\n    toast({\r\n      title: \"Task Deleted\",\r\n      status: \"warning\",\r\n      isClosable: true,\r\n    });\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    dispatch(setSelectedTask(id));\r\n    onOpen();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {open && (\r\n        <ConfirmDelete\r\n          handleClose={handleClose}\r\n          handleConfirm={handleConfirm}\r\n          isOpen={open}\r\n          taskTitle={title}\r\n        />\r\n      )}\r\n      <Box\r\n        ref={setNodeRef}\r\n        bg=\"white\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"2px\"\r\n        boxShadow=\"md\"\r\n        height=\"150px\"\r\n        minHeight=\"150px\"\r\n        mt=\"2\"\r\n        style={style}\r\n        width=\"full\"\r\n      >\r\n        <Stack direction=\"row\" height=\"100%\" pr=\"1\" spacing=\"none\">\r\n          <Stack direction=\"column\" overflowY=\"auto\" width={hasMinWidth ? \"90%\" : \"80%\"}>\r\n            <Heading\r\n              as=\"h5\"\r\n              isTruncated={!hasMinWidth}\r\n              m=\"2\"\r\n              mb=\"0\"\r\n              size={hasMinWidth ? \"md\" : \"sm\"}\r\n            >\r\n              {title}\r\n            </Heading>\r\n\r\n            <Text m=\"5\" ml=\"6\" noOfLines={3} pl=\"2\" size=\"sm\" userSelect=\"none\">\r\n              {description}\r\n            </Text>\r\n          </Stack>\r\n          <Stack\r\n            align=\"center\"\r\n            direction=\"column\"\r\n            pb=\"2\"\r\n            spacing=\"auto\"\r\n            width={hasMinWidth ? \"10%\" : \"20%\"}\r\n          >\r\n            <IconButton\r\n              {...listeners}\r\n              {...attributes}\r\n              _active={{\r\n                backgroundColor: \"white\",\r\n              }}\r\n              _focus={{\r\n                backgroundColor: \"white\",\r\n              }}\r\n              _hover={{\r\n                backgroundColor: \"white\",\r\n              }}\r\n              _selected={{\r\n                backgroundColor: \"white\",\r\n              }}\r\n              bg=\"white\"\r\n              color=\"blackAlpha.700\"\r\n              cursor=\"grab\"\r\n              fontSize=\"smaller\"\r\n              fontWeight=\"thin\"\r\n              icon={<FaGripVertical fontSize=\"smaller\" fontWeight=\"thin\" />}\r\n              maxWidth=\"5\"\r\n              minWidth=\"5\"\r\n              role=\"button\"\r\n              size=\"sm\"\r\n              style={{ touchAction: \"none\" }}\r\n              textAlign=\"center\"\r\n              touch-action=\"none\"\r\n              width=\"2\"\r\n            />\r\n            <Menu>\r\n              <MenuButton\r\n                aria-label=\"Options\"\r\n                as={IconButton}\r\n                color=\"blackAlpha.700\"\r\n                icon={<MdSettings />}\r\n                maxHeight=\"6\"\r\n                maxWidth=\"5\"\r\n                minWidth=\"5\"\r\n                variant=\"outline\"\r\n              />\r\n              <MenuList>\r\n                <MenuItem icon={<MdEdit />} onClick={handleEdit}>\r\n                  Edit Task\r\n                </MenuItem>\r\n                <MenuItem icon={<MdDelete />} onClick={handleOpen}>\r\n                  Delete Task\r\n                </MenuItem>\r\n              </MenuList>\r\n            </Menu>\r\n          </Stack>\r\n        </Stack>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nCard.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  droppableId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Box, Heading, Stack } from \"@chakra-ui/layout\";\r\nimport { useDroppable } from \"@dnd-kit/core\";\r\nimport { useMediaQuery } from \"@chakra-ui/media-query\";\r\n\r\nimport styleDefault from \"../styles/styles\";\r\nimport { useData } from \"../context/DataProvider\";\r\n\r\nimport Card from \"./Card\";\r\n\r\nconst CardContainer = ({ head, droppableId }) => {\r\n  const {\r\n    state: { data },\r\n  } = useData();\r\n  const { setNodeRef, isOver } = useDroppable({\r\n    id: droppableId,\r\n  });\r\n\r\n  const { bgColor } = styleDefault[droppableId.toLowerCase()];\r\n  const [hasMinWidth] = useMediaQuery(\"(min-width: 539px)\");\r\n\r\n  return (\r\n    <Box\r\n      ref={setNodeRef}\r\n      bg={isOver ? bgColor : \"white\"}\r\n      borderRadius=\"xl\"\r\n      borderWidth=\"2px\"\r\n      height=\"fit-content\"\r\n      maxWidth=\"100%\"\r\n      p=\"3\"\r\n      pb={data.length > 0 ? \"6\" : \"16\"}\r\n      shadow=\"md\"\r\n    >\r\n      <Stack direction=\"column\">\r\n        <Stack direction=\"row\" spacing=\"auto\">\r\n          <Heading\r\n            isTruncated\r\n            as={\"h4\"}\r\n            color={isOver ? \"white\" : bgColor}\r\n            fontWeight=\"bold\"\r\n            m=\"2\"\r\n            size={hasMinWidth ? \"xl\" : \"lg\"}\r\n            textAlign=\"center\"\r\n            textShadow=\"inner\"\r\n          >\r\n            {head}\r\n          </Heading>\r\n        </Stack>\r\n        {data\r\n          .filter((x) => x.status === droppableId)\r\n          .map((item, i) => (\r\n            <Card key={i} droppableId={droppableId} {...item} />\r\n          ))}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nCardContainer.propTypes = {\r\n  head: PropTypes.string.isRequired,\r\n  droppableId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default CardContainer;\r\n","import React from \"react\";\r\nimport {\r\n  Stack,\r\n  ButtonGroup,\r\n  Button,\r\n  Textarea,\r\n  useToast,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Text,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalCloseButton,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Select,\r\n} from \"@chakra-ui/react\";\r\nimport { MdArrowDropDown } from \"react-icons/md\";\r\n\r\nimport { useData } from \"../context/DataProvider\";\r\nimport { addTask, editTask, initialTask, setSelectedTask } from \"../context/reducer\";\r\n\r\nconst Form = () => {\r\n  const {\r\n    dispatch,\r\n    state: { selectedId, data },\r\n    isOpen,\r\n    onClose,\r\n  } = useData();\r\n\r\n  const [values, setValues] = React.useState(initialTask);\r\n\r\n  const titleRef = React.useRef();\r\n  const descRef = React.useRef();\r\n  const statusRef = React.useRef();\r\n  const toast = useToast();\r\n  const [invalid, setInvalid] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    if (selectedId) {\r\n      let element = data.find((x) => x.id === selectedId);\r\n\r\n      setValues(element);\r\n    }\r\n  }, [selectedId, data]);\r\n  React.useEffect(() => {\r\n    if (!isOpen) {\r\n      setInvalid(false);\r\n      dispatch(setSelectedTask(null));\r\n      setValues(initialTask);\r\n    }\r\n  }, [isOpen, dispatch]);\r\n\r\n  //Refs para no renderizar en cada cambio el form\r\n  const handleSubmit = () => {\r\n    if (titleRef.current && descRef.current && statusRef.current) {\r\n      let title = titleRef.current.value;\r\n      let description = descRef.current.value;\r\n      let status = statusRef.current.value;\r\n\r\n      if (title === \"\") {\r\n        setInvalid(true);\r\n\r\n        return;\r\n      }\r\n\r\n      if (values.id === \"\") {\r\n        dispatch(addTask({ title, description, status }));\r\n      } else {\r\n        dispatch(editTask({ ...values, title, description, status }));\r\n      }\r\n      toast({\r\n        title: \"Task Created!\",\r\n        status: \"success\",\r\n        isClosable: true,\r\n      });\r\n    }\r\n    onClose();\r\n  };\r\n\r\n  const handleValid = (e) => {\r\n    if (e.target?.value !== \"\") {\r\n      setInvalid(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal isOpen={isOpen} onClose={onClose}>\r\n      <ModalOverlay />\r\n      <ModalContent>\r\n        <ModalHeader>Add Task</ModalHeader>\r\n        <ModalCloseButton />\r\n        <ModalBody>\r\n          <Stack spacing={4}>\r\n            <FormControl isRequired>\r\n              <FormLabel htmlFor=\"title\">Title</FormLabel>\r\n              <Input\r\n                ref={titleRef}\r\n                defaultValue={values.title}\r\n                id=\"title\"\r\n                isInvalid={invalid}\r\n                placeholder=\"Task\"\r\n                onChange={handleValid}\r\n              />\r\n              {invalid && (\r\n                <Text as=\"span\" color=\"red\" fontSize={15} textAlign=\"left\">\r\n                  The title cannot be empty\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n            <FormControl isRequired>\r\n              <Textarea\r\n                ref={descRef}\r\n                defaultValue={values.description}\r\n                placeholder=\"Write here a description\"\r\n                size=\"sm\"\r\n              />\r\n            </FormControl>\r\n            <FormControl isRequired>\r\n              <Select ref={statusRef} defaultValue={values.status} icon={<MdArrowDropDown />}>\r\n                <option value=\"TODO\">TODO</option>\r\n                <option value=\"DOING\">DOING</option>\r\n                <option value=\"DONE\">DONE</option>\r\n              </Select>\r\n            </FormControl>\r\n          </Stack>\r\n        </ModalBody>\r\n\r\n        <ModalFooter>\r\n          <ButtonGroup d=\"flex\" justifyContent=\"flex-end\">\r\n            <Button variant=\"outline\" onClick={onClose}>\r\n              Cancel\r\n            </Button>\r\n            <Button colorScheme=\"teal\" onClick={handleSubmit}>\r\n              Save\r\n            </Button>\r\n          </ButtonGroup>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import { IconButton } from \"@chakra-ui/button\";\r\nimport { Box, Stack, SimpleGrid } from \"@chakra-ui/layout\";\r\nimport { DndContext } from \"@dnd-kit/core\";\r\nimport React from \"react\";\r\nimport { MdAdd } from \"react-icons/md\";\r\n\r\nimport CardContainer from \"./components/CardContainer\";\r\nimport TodoForm from \"./components/TodoForm\";\r\nimport { useData } from \"./context/DataProvider\";\r\nimport { editTask } from \"./context/reducer\";\r\n\r\nfunction App() {\r\n  const { state, dispatch, onOpen } = useData();\r\n  const { data } = state;\r\n\r\n  const handleDragEnd = (ev) => {\r\n    const {\r\n      over: { id: newStatus },\r\n      active: { id: elementId },\r\n    } = ev;\r\n    const element = data.find((x) => x.id === elementId);\r\n\r\n    dispatch(editTask({ ...element, status: newStatus }));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TodoForm />\r\n      <DndContext onDragEnd={handleDragEnd}>\r\n        <Stack direction=\"row\" width=\"100%\">\r\n          <SimpleGrid\r\n            backgroundColor=\"gray.300\"\r\n            height=\"100vh\"\r\n            minChildWidth=\"120px\"\r\n            spacing=\"30px\"\r\n            width=\"100%\"\r\n          >\r\n            <Box height=\"100vh\" p=\"2\">\r\n              <CardContainer droppableId=\"TODO\" head=\"TO DO\" />\r\n            </Box>\r\n            <Box height=\"100vh\" p=\"2\">\r\n              <CardContainer droppableId=\"DOING\" head=\"DOING\" />\r\n            </Box>\r\n            <Box height=\"100vh\" p=\"2\">\r\n              <CardContainer droppableId=\"DONE\" head=\"DONE\" />\r\n            </Box>\r\n          </SimpleGrid>\r\n          <Stack height=\"100%\" pointerEvents=\"none\" position=\"fixed\" width=\"100%\">\r\n            <IconButton\r\n              _focusWithin={{\r\n                backgroundColor: \"teal.600\",\r\n                color: \"white\",\r\n              }}\r\n              _selected={{\r\n                backgroundColor: \"teal.600\",\r\n                color: \"white\",\r\n              }}\r\n              aria-details=\"Add todo\"\r\n              aria-label=\"add-button\"\r\n              bg=\"teal.600\"\r\n              borderColor=\"green.900\"\r\n              borderRadius=\"3xl\"\r\n              boxShadow=\"2xl\"\r\n              color=\"white\"\r\n              fontSize=\"2xl\"\r\n              fontWeight=\"extrabold\"\r\n              icon={<MdAdd />}\r\n              marginBottom=\"3\"\r\n              marginLeft=\"auto\"\r\n              marginRight=\"6\"\r\n              marginTop=\"auto\"\r\n              pointerEvents=\"all\"\r\n              size=\"lg\"\r\n              width=\"1\"\r\n              onClick={onOpen}\r\n            />\r\n          </Stack>\r\n        </Stack>\r\n      </DndContext>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport DataProvider from \"./context/DataProvider\";\r\nimport \"./utils/console-message\"; //IFFE\r\n\r\nReactDOM.render(\r\n  <DataProvider>\r\n    <ChakraProvider>\r\n      <React.StrictMode>\r\n        <App />\r\n      </React.StrictMode>\r\n    </ChakraProvider>\r\n  </DataProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}